@inject IApiClient _apiClient
@inject IHxMessengerService _toaster;

<EditForm Model="@appSettings">
	<div class="row g-3">
		<div class="col-md-12">
			<HxCard>
				<HeaderTemplate>
					<HxSwitch Text="Automatic Syncing" @bind-Value="appSettings.EnablePolling" Inline="true" />
					<HxPopover Trigger="PopoverTrigger.Hover|PopoverTrigger.Click|PopoverTrigger.Focus"
							   Title="<b>Automatic Syncing</b>"
							   Content="@AutomaticSyncingDocumentation"
							   Html="true">
						<HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Info">?</HxBadge>
					</HxPopover>
				</HeaderTemplate>
				<BodyTemplate>
					<HxFormState Enabled="@appSettings.EnablePolling">
						<HxInputNumber Label="Check for new workouts every X (seconds)" TValue="int" @bind-Value="appSettings.PollingIntervalSeconds" />
					</HxFormState>
				</BodyTemplate>
			</HxCard>
		</div>
	</div>

	<br />
	<HxSwitch Text="Check for new P2G Releases" @bind-Value="appSettings.CheckForUpdates" />
	<br />
	<HxSubmit Color="ThemeColor.Primary" OnClick="SaveAppSettings">Save</HxSubmit>

</EditForm>

@code {
	private App appSettings;
	private string configDocumentation;

	public AppSettingsForm()
	{
		var settings = new SettingsGetResponse();
		appSettings = settings.App;
	}

	protected override Task OnInitializedAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(AppSettingsForm)}.{nameof(OnInitializedAsync)}", kind: ActivityKind.Client);
		return LoadDataAsync();
	}

	private async Task LoadDataAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(SettingsGetResponse)}.{nameof(LoadDataAsync)}", kind: ActivityKind.Client);
		var settings = await _apiClient.SettingsGetAsync();

		appSettings = settings.App;

		var systemInfo = await _apiClient.SystemInfoGetAsync(new SystemInfoGetRequest() { CheckForUpdate = settings.App.CheckForUpdates });
		configDocumentation = systemInfo.Documentation + "/configuration/app";
	}

	protected async Task SaveAppSettings()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(AppSettingsForm)}.{nameof(SaveAppSettings)}", kind: ActivityKind.Client);

		_toaster.Clear();

		try
		{
			appSettings = await _apiClient.SettingsAppPostAsync(appSettings);
			_toaster.AddInformation("App Settings Saved!");
		}
		catch (FlurlHttpException e) when (e.StatusCode is StatusCodes.Status400BadRequest)
		{
			var error = await e.GetResponseJsonAsync<ErrorResponse>();
			_toaster.AddError(error.Message);
		}
		catch (Exception e)
		{
			_toaster.AddError($"Failed to save App Settings - {e.Message} - See logs for details.");
			Log.Error("UI - Failed to save App settings.", e);
		}
	}

	private string AutomaticSyncingDocumentation => $"P2G can periodically and automatically sync workouts.  By enabling this setting, P2G will check for workouts every X seconds and sync them.  The number of workouts that P2G will fetch per sync can be configured on the <b>Peloton Settings</b> tab.<br /><br /><b>WARNING:</b> Setting this to a frequency of hourly or less may get you flagged by Peloton as a bad actor and they may reset your password. The default is set to Daily.<br /><br /><a href='{configDocumentation}'>Documentation</a><br ?><small>(click the <b>?</b> to pin this window)</small>";
}
