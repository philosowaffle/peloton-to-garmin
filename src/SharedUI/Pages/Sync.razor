@page "/sync"
@using SharedUI.Shared;
@inherits TracingComponentBase
@inject IApiClient _apiClient;
@inject IHxMessengerService _toaster;

<PageTitle>Sync</PageTitle>

<GarminMfaModal @ref="_garminMfaModal" />

@if (PelotonSettingNotConfiguredYet)
{
	<div class="row justify-content-start">
		<HxAlert Color="ThemeColor.Primary"><HxIcon Icon="@BootstrapIcon.GearFill" /> Head on over to the <a href="settings">Settings</a> page to connect to Peloton.</HxAlert>
	</div>
}

<HxCard>
	<BodyTemplate>
		<div class="row">
			<div class="col-md-4">
				<HxSwitch @bind-Value="forceStackWorkouts" Inline="true"> 
					<TextTemplate>
						Stack Workouts
                        <HxPopover Trigger="PopoverTrigger.Hover|PopoverTrigger.Click|PopoverTrigger.Focus"
                                   Title="<b>Stack Workouts</b>"
                                   Content="@StackWorkoutsDocumentation"
                                   Html="true">
                            <HxIcon Icon="@BootstrapIcon.QuestionCircle" />
                        </HxPopover>
					</TextTemplate>
				</HxSwitch>
				
			</div>
			<div class="col-md-4">
			</div>
			<div class="col-md-4 text-end">
				<HxButton OnClick="SyncAsync" Color="ThemeColor.Primary" Enabled="@IsSyncButtonEnabled()">
					Sync <span class="badge bg-secondary">@selectedItems.Count()</span>
				</HxButton>
			</div>
		</div>
	</BodyTemplate>
</HxCard>

<HxGrid TItem="PelotonWorkout" MultiSelectionEnabled="true" Responsive="true" DataProvider="LoadDataAsync" @bind-SelectedDataItems="selectedItems" PageSize="PageSize" SelectionEnabled="false">
	<Columns>
		<HxGridColumn TItem="PelotonWorkout" HeaderText="Date" ItemTextSelector="@(item => DateTimeOffset.FromUnixTimeSeconds(item.CreatedAt).LocalDateTime.ToString())" />
		<HxGridColumn TItem="PelotonWorkout" HeaderText="Title" ItemTextSelector="@(item => item.WorkoutTitle ?? item.Name)" />
		<HxGridColumn TItem="PelotonWorkout" HeaderText="Instructor" ItemTextSelector="@(item => item.InstructorName)" />
		<HxGridColumn TItem="PelotonWorkout" HeaderText="Workout Type" ItemTextSelector="@(item => item.PelotonFitnessDiscipline)" />
		<HxGridColumn TItem="PelotonWorkout" HeaderText="Is Outdoor?" ItemTextSelector="@(item => item.IsOutdoor.ToString())" />
	</Columns>
</HxGrid>

@code {

	private HashSet<PelotonWorkout> selectedItems = new();
	private static int PageSize = 25;
	private bool PelotonSettingNotConfiguredYet = false;
	private bool forceStackWorkouts = false;

	private GarminMfaModal? _garminMfaModal;

	public Sync() : base(nameof(Sync)) => _toaster?.Clear();

	public override void Dispose()
	{
		_toaster.Clear();
		base.Dispose();
	}

	protected override async Task OnInitializedAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Sync)}.{nameof(OnInitializedAsync)}", kind: ActivityKind.Client);
	
		var settings = await _apiClient.SettingsGetAsync();
		PelotonSettingNotConfiguredYet = !settings.Peloton.IsConfigured;
	}

	private async Task<GridDataProviderResult<PelotonWorkout>> LoadDataAsync(GridDataProviderRequest<PelotonWorkout> request)
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Sync)}.{nameof(LoadDataAsync)}", kind: ActivityKind.Client);

		_toaster.Clear();

		if (PelotonSettingNotConfiguredYet)
			return new GridDataProviderResult<PelotonWorkout>() { Data = new List<PelotonWorkout>(), TotalCount = 0 };

		try
		{
			var pageIndex = request.StartIndex / PageSize;
			var recentWorkouts = await _apiClient.PelotonWorkoutsGetAsync(new PelotonWorkoutsGetRequest() { PageSize = PageSize, PageIndex = pageIndex });
			return new GridDataProviderResult<PelotonWorkout>() { Data = recentWorkouts.Items, TotalCount = recentWorkouts.TotalItems };
		}
		catch (ApiClientException e)
		{
			_toaster.AddError(e.Message);
			Log.Error("UI - Failed to load Peloton workouts.", e);
		}
		catch (Exception e)
		{
			_toaster.AddError($"Failed to load Peloton workouts - {e.Message} - See logs for details.");
			Log.Error("UI - Failed to load Peloton workouts.", e);
		}

		return new GridDataProviderResult<PelotonWorkout>() { Data = new List<PelotonWorkout>(), TotalCount = 0 };
	}

	private async Task SyncAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Sync)}.{nameof(SyncAsync)}", kind: ActivityKind.Client);

		_toaster.Clear();

		await _garminMfaModal!.ShowAsync(ContinueSyncAsync);
	}

	private async Task ContinueSyncAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Sync)}.{nameof(ContinueSyncAsync)}", kind: ActivityKind.Client);

		try
		{
			var result = await _apiClient.SyncPostAsync(new SyncPostRequest() { WorkoutIds = selectedItems.Select(i => i.Id!).ToList(), ForceStackWorkouts = forceStackWorkouts });
			selectedItems.Clear();

			if (result.SyncSuccess)
			{
				_toaster.AddInformation("Successfully synced selected workouts.");
			}
			else
			{
				if (result.Errors is null || !result.Errors.Any())
				{
					_toaster.AddError("An unknown error occurred. Please check logs for more details.");
					return;
				}

				foreach (var error in result.Errors)
					_toaster.AddError(error.Message);
			}

		}
		catch (SyncTimeoutException te)
		{
			_toaster.AddInformation("Long running sync will continue running in the background.");
			Log.Information("UI - Sync timeout reached.", te);
		}
		catch (ApiClientException e)
		{
			_toaster.AddError(e.Message);
			Log.Error("UI - Failed to sync Peloton workouts.", e);
		}
		catch (Exception e)
		{
			_toaster.AddError($"Failed to sync - {e.Message} - See logs for details.");
			Log.Error("UI - Failed to sync.", e);
		}
	}

	private bool IsSyncButtonEnabled()
	{
		return selectedItems.Any();
	}

	private string StackWorkoutsDocumentation => $"Checking this will force the selected workouts to be combined into a single workout.  Selecting this will override anything you have configured in Settings.  It will stack the workouts regardless of how much time is between them so long as the workouts are of the same type..";
}