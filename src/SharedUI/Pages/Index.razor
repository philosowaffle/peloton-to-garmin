@page "/"
@using SharedUI.Shared;
@inherits TracingComponentBase
@inject IApiClient _apiClient
@inject IHxMessengerService _toaster;

<PageTitle>Home</PageTitle>

<GarminMfaModal @ref="_garminMfaModal" />

<div class="row">
	<div class="col">
		<HxBadge Type="BadgeType.RoundedPill" Color="@GetPillThemeColor(syncStatus.SyncStatus)" TextColor="@GetPillTextThemeColor(syncStatus.SyncStatus)">Periodic syncing is @syncStatus.AutoSyncHealthString</HxBadge>
		@if (syncStatus.SyncStatus != Api.Contract.Status.NotRunning)
		{
			<span> </span>
			<HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Secondary" TextColor="ThemeColor.Light">Next Sync: @syncStatus.NextSyncTime</HxBadge>
		}
	</div>
</div>

<br />

<div class="row">

	@foreach (var workout in TodaysWorkouts)
	{
		<div class="col-md-auto">
			<HxCard ImageAlt="Grey area"
				ImageSrc="@workout.ImageUrl?.ToString()"
				ImageHeight="180"
				style="width: 19rem; margin-bottom: 1rem; height: 19rem;">
				<BodyTemplate>
					<HxCardTitle>@workout.WorkoutTitle</HxCardTitle>
					<HxCardSubtitle CssClass="mb-2 text-muted">@DateTimeOffset.FromUnixTimeSeconds(workout.CreatedAt).LocalDateTime.ToString()</HxCardSubtitle>
				</BodyTemplate>
			</HxCard>
		</div>
	}
</div>

<div class="row justify-content-start">

	@if (TodaysWorkoutsAreLoading)
	{
		<HxPlaceholderContainer Animation="PlaceholderAnimation.Glow">
			<HxPlaceholder Columns="4" />
		</HxPlaceholderContainer>
	}
	else if (!TodaysWorkouts.Any())
	{
		<HxAlert Color="ThemeColor.Primary">No workouts today.</HxAlert>
	}
	else
	{
		<div class="col-sm-4">
			<HxButton Color="ThemeColor.Primary" @onclick="SyncTodaysWorkoutsAsync">Sync todays workouts</HxButton>
		</div>
	}
</div>


@code {

	private bool TodaysWorkoutsAreLoading = true;
	private SyncGetResponse syncStatus;
	private SettingsGetResponse settings;
	private SystemInfoGetResponse systemInfo;
	private ICollection<PelotonWorkout> TodaysWorkouts;

	private GarminMfaModal? _garminMfaModal;

	public Index() : base(nameof(Index))
	{
		syncStatus = new SyncGetResponse();
		settings = new SettingsGetResponse();
		systemInfo = new SystemInfoGetResponse();
		TodaysWorkouts = new List<PelotonWorkout>(0);


		_toaster?.Clear();
	}

	protected override async Task OnInitializedAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Index)}.{nameof(OnInitializedAsync)}", kind: ActivityKind.Client);

		try
		{
			var getTodaysWorkoutsTask = LoadTodaysWorkoutsAsync();
			var getSettingsTask = _apiClient.SettingsGetAsync();
			var getSyncStatusAsync = LoadSyncStatusAsync();

			TodaysWorkouts = await getTodaysWorkoutsTask;
			TodaysWorkoutsAreLoading = false;

			settings = await getSettingsTask;
			if (settings.App.CheckForUpdates)
			{
				systemInfo = await _apiClient.SystemInfoGetAsync(new SystemInfoGetRequest() { CheckForUpdate = true });
				if (systemInfo.NewerVersionAvailable.GetValueOrDefault())
					_toaster.AddInformation(title: "New Version Available!", message: "Head over to the About page to learn more");
			}

			await getSyncStatusAsync;

		}
		catch (Exception e)
		{
			Log.Error("UI - Failed to fetch data for home page.", e);
			_toaster.AddError($"Failed to fetch data from P2G Api - {e.Message} - See logs for details.");
		}
	}

	public override void Dispose()
	{
		_toaster.Clear();
		base.Dispose();
	}

	private async Task LoadSyncStatusAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Index)}.{nameof(LoadSyncStatusAsync)}", kind: ActivityKind.Client);

		try
		{
			syncStatus = await _apiClient.SyncGetAsync();
		}
		catch (Exception e)
		{
			Log.Error("UI - Failed to fetch Sync status.", e);
			_toaster.AddError($"Failed to fetch Sync status - {e.Message} - See logs for details.");
		}
	}

	private async Task<ICollection<PelotonWorkout>> LoadTodaysWorkoutsAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Index)}.{nameof(LoadTodaysWorkoutsAsync)}", kind: ActivityKind.Client);

		try
		{
			var startOfDayLocalTime = DateTime.Now.Date;
			var today = startOfDayLocalTime.ToUniversalTime();
			var todaysWorkouts = await _apiClient.PelotonWorkoutsGetAsync(new PelotonWorkoutsGetAllRequest()
				{
					SinceDate = today,
					WorkoutStatusFilter = WorkoutStatus.Completed,
					ExcludeWorkoutTypes = settings.Peloton.ExcludeWorkoutTypes
				});

			return todaysWorkouts.Items;
		}
		catch (FlurlHttpException e)
		{
			var error = await e.GetResponseJsonAsync<ErrorResponse>();
			_toaster.AddError(error.Message);
			Log.Error("UI - Failed to load Peloton workouts.", e);
		}
		catch (Exception e)
		{
			_toaster.AddError($"Failed to load Peloton workouts - {e.Message} - See logs for details.");
			Log.Error("UI - Failed to load Peloton workouts.", e);
		}

		return new List<PelotonWorkout>(0);
	}

	private async Task SyncTodaysWorkoutsAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Index)}.{nameof(SyncTodaysWorkoutsAsync)}", kind: ActivityKind.Client);

		if (!TodaysWorkouts.Any())
		{
			_toaster.AddInformation("No workouts to sync today.");
			return;
		}

		await _garminMfaModal!.ShowAsync(ContinueSyncAsync);
	}

	private async Task ContinueSyncAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Index)}.{nameof(ContinueSyncAsync)}", kind: ActivityKind.Client);
		SyncPostResponse? syncResponse = null;
		try
		{
			syncResponse = await _apiClient.SyncPostAsync(new SyncPostRequest() { WorkoutIds = TodaysWorkouts.Select(w => w!.Id!).ToList() });
		}
		catch (SyncTimeoutException te)
		{
			_toaster.AddInformation("Long running sync will continue running in the background.");
			Log.Information("UI - Sync timeout reached.", te);
		}
		catch (Exception e)
		{
			_toaster.AddError($"Failed to sync - {e.Message} - See logs for details.");
			Log.Error("UI - Failed to sync.", e);
		}
		finally
		{
			if (syncResponse?.Errors?.Any() ?? false)
			{
				foreach (var error in syncResponse.Errors)
				{
					_toaster.AddWarning($"Errors during sync - {error.Message}");
				}
			}

			if (syncResponse?.SyncSuccess ?? false)
				_toaster.AddInformation("Success! Synced today's workouts.");
		}
	}

	private ThemeColor GetPillThemeColor(Api.Contract.Status status)
	{
		switch (syncStatus.SyncStatus)
		{
			case Api.Contract.Status.Running:
				return ThemeColor.Success;
			case Api.Contract.Status.NotRunning:
				return ThemeColor.Secondary;
			case Api.Contract.Status.Dead:
				return ThemeColor.Danger;
			case Api.Contract.Status.UnHealthy:
				return ThemeColor.Warning;
		}

		return ThemeColor.Light;
	}

	private ThemeColor GetPillTextThemeColor(Api.Contract.Status status)
	{
		switch (syncStatus.SyncStatus)
		{
			case Api.Contract.Status.Running:
				return ThemeColor.Light;
			case Api.Contract.Status.NotRunning:
				return ThemeColor.Light;
			case Api.Contract.Status.Dead:
				return ThemeColor.Light;
			case Api.Contract.Status.UnHealthy:
				return ThemeColor.Dark;
		}

		return ThemeColor.Dark;
	}
}