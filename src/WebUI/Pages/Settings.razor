@page "/settings"
@inherits TracingComponentBase
@inject IApiClient _apiClient

<PageTitle>Settings</PageTitle>
<h1>Settings</h1>
<a href="@configDocumentation">Documentation</a>
<br /><br />

<HxTabPanel InitialActiveTabId="tab0">
	<HxTab Id="tab0" Title="App">
		<Content>
			<EditForm Model="@appSettings">

				<br />
				<HxSwitch Label="Automatic Syncing" @bind-Value="appSettings.EnablePolling" />
				<br />
				<HxFormState Enabled="@appSettings.EnablePolling">
					<HxInputNumber Label="Check for new workouts every X (seconds)" TValue="int" @bind-Value="appSettings.PollingIntervalSeconds" />
				</HxFormState>
				<br />
				<HxSwitch Label="Check for new P2G Releases" @bind-Value="appSettings.CheckForUpdates" />
				<br />
				<HxAccordion CssClass="accordion-flush">
					<HxAccordionItem>
						<HeaderTemplate>Advanced</HeaderTemplate>
						<BodyTemplate>
							<br />
							<HxInputText @bind-Value="appSettings.OutputDirectory" Label="Output Directory" />
						</BodyTemplate>
					</HxAccordionItem>
				</HxAccordion>
				<br />
				<HxSubmit Color="ThemeColor.Primary" OnClick="SaveAppSettings">Save</HxSubmit>

			</EditForm>
		</Content>
	</HxTab>
	<HxTab Id="tab1" Title="Conversion">
		<Content>
			<EditForm Model="@formatSettings">

				<br />
				<HxSwitch Label="Convert to FIT" @bind-Value="formatSettings.Fit" />
				<HxSwitch Label="Convert to TCX" @bind-Value="formatSettings.Tcx" />
				<HxSwitch Label="Convert to JSON" @bind-Value="formatSettings.Json" />
				<br />
				<HxSelect
					Label="Cycling Lap Type"
					Data="@lapTypes"
					Nullable="false"
					NullDataText="Loading info..."
					@bind-Value="formatSettings.Cycling.PreferredLapType" />
				<br />
				<HxSelect
					Label="Running Lap Type"
					Data="@lapTypes"
					Nullable="false"
					NullDataText="Loading info..."
					@bind-Value="formatSettings.Running.PreferredLapType" />
				<br />
				<HxSelect
					Label="Rowing Lap Type"
					Data="@lapTypes"
					Nullable="false"
					NullDataText="Loading info..."
					@bind-Value="formatSettings.Rowing.PreferredLapType" />
				<br />
				<br />
				<HxAccordion CssClass="accordion-flush">
					<HxAccordionItem>
						<HeaderTemplate>Advanced</HeaderTemplate>
						<BodyTemplate>
							<HxInputText Label="Path to custom deviceInfo.xml file" @bind-Value="formatSettings.DeviceInfoPath" /><br />
							<HxSwitch Label="Include Time In HR Zones" @bind-Value="formatSettings.IncludeTimeInHRZones" />
							<HxSwitch Label="Include Time in Power Zones" @bind-Value="formatSettings.IncludeTimeInPowerZones" />
							<HxSwitch Label="Save a backup copy of Converted files to output dir" @bind-Value="formatSettings.SaveLocalCopy" />
						</BodyTemplate>
					</HxAccordionItem>
				</HxAccordion>
				<br />
				<HxSubmit Color="ThemeColor.Primary" OnClick="SaveFormatSettings">Save</HxSubmit>

			</EditForm>
		</Content>
	</HxTab>
	<HxTab Id="tab2" Title="Peloton">
		<Content>
			<EditForm Model="@pelotonSettings">
				<br />
				<HxInputNumber Label="Default number of workouts to download" TValue="int" @bind-Value="pelotonSettings.NumWorkoutsToDownload" />
				<br />
				<HxInputText @bind-Value="pelotonSettings.Email" Label="Email" Type="InputType.Email" InputMode="InputMode.Email" />
				<br />
				<HxInputText @bind-Value="pelotonSettings.Password" Label="Password" Type="InputType.Password">
					<LabelTemplate>
						Password
						@if (pelotonSettings.IsPasswordSet)
						{
							<HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Success">Password is set</HxBadge>
						}
					</LabelTemplate>
					<InputGroupEndTemplate>
						@if (pelotonSettings.IsPasswordSet)
						{
							<HxButton Text="Clear" Color="ThemeColor.Secondary" Outline="true" OnClick="ClearPelotonPassword" />
						}
					</InputGroupEndTemplate>
				</HxInputText>
				<br />
				<HxMultiSelect 
				   Label="Excluded Workout Types"
				   Data="@workoutTypes"
				   @bind-Value="@selectedWorkoutTypes"
				   EmptyText="- none -"
				   TextSelector="(v) => v.ToString()"
				   GenerateChip=true
				   NullDataText="Loading workout types..." />
				<br />
				<HxSubmit Color="ThemeColor.Primary" OnClick="SavePelotonSettings">Save</HxSubmit>
			</EditForm>
		</Content>
	</HxTab>
	<HxTab Id="tab3" Title="Garmin">
		<Content>
			<EditForm Model="@garminSettings">
				<br />
				<HxSwitch Label="Automatically upload to Garmin Connect" @bind-Value="garminSettings.Upload" />
				<br />
				<HxFormState Enabled="@garminSettings.Upload">
					<HxInputText @bind-Value="garminSettings.Email" Label="Email" Type="InputType.Email" InputMode="InputMode.Email" />
					<br />
					<HxInputText @bind-Value="garminSettings.Password" Label="Password" Type="InputType.Password" >
						<LabelTemplate>
						Password
						@if (garminSettings.IsPasswordSet)
						{
							<HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Success">Password is set</HxBadge>
						}
						</LabelTemplate>
						<InputGroupEndTemplate>
							@if (garminSettings.IsPasswordSet)
							{
								<HxButton Text="Clear" Color="ThemeColor.Secondary" Outline="true" OnClick="ClearPelotonPassword" />
							}
						</InputGroupEndTemplate>
					</HxInputText>
					<br />
					<HxAccordion CssClass="accordion-flush">
						<HxAccordionItem>
							<HeaderTemplate>Advanced</HeaderTemplate>
							<BodyTemplate>
								<br />
								<HxSelect
										Label="Format to Upload"
										Data="@formatTypes"
										Nullable="false"
										NullDataText="Loading info..."
										@bind-Value="garminSettings.FormatToUpload" />
								<br />
								<HxSelect
										Label="Upload Strategy to use"
										Data="@uploadStrategyTypes"
										Nullable="false"
										NullDataText="Loading info..."
										@bind-Value="garminSettings.UploadStrategy" />
							</BodyTemplate>
						</HxAccordionItem>
					</HxAccordion>
					<br />
				</HxFormState>
				<br />
				<HxSubmit Color="ThemeColor.Primary" OnClick="SaveGarminSettings">Save</HxSubmit>
			</EditForm>
		</Content>
	</HxTab>
</HxTabPanel>

@code {

	private static ICollection<PreferredLapType> lapTypes = Enum.GetValues(typeof(PreferredLapType)).Cast<PreferredLapType>().ToList();
	private static ICollection<FileFormat> formatTypes = Enum.GetValues(typeof(FileFormat)).Cast<FileFormat>().ToList();
	private static ICollection<UploadStrategy> uploadStrategyTypes = Enum.GetValues(typeof(UploadStrategy)).Cast<UploadStrategy>().ToList();
	private static ICollection<WorkoutType> workoutTypes = Enum.GetValues(typeof(WorkoutType)).Cast<WorkoutType>().ToList();

	private Common.App appSettings;
	private Format formatSettings;
	private SettingsPelotonGetResponse pelotonSettings;
	private SettingsGarminGetResponse garminSettings;
	private string configDocumentation;

	private List<WorkoutType> selectedWorkoutTypes = new List<WorkoutType>();

	public Settings() : base(nameof(Settings))
	{
		var settings = new SettingsGetResponse();
		appSettings = settings.App;
		formatSettings = settings.Format;
		pelotonSettings = settings.Peloton;
		garminSettings = settings.Garmin;
		configDocumentation = string.Empty;
	}

	protected override Task OnInitializedAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Settings)}.{nameof(OnInitializedAsync)}", kind: ActivityKind.Client);
		return LoadDataAsync();
	}

	protected async Task SaveAppSettings()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Settings)}.{nameof(SaveAppSettings)}", kind: ActivityKind.Client);
		appSettings = await _apiClient.SettingsAppPostAsync(appSettings);
	}

	protected async Task SaveFormatSettings() 
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Settings)}.{nameof(SaveFormatSettings)}", kind: ActivityKind.Client);
		formatSettings = await _apiClient.SettingsFormatPostAsync(formatSettings);
	}

	protected void ClearPelotonPassword()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Settings)}.{nameof(ClearPelotonPassword)}", kind: ActivityKind.Client);
		pelotonSettings.Password = string.Empty;
		pelotonSettings.IsPasswordSet = false;
	}

	protected async Task SavePelotonSettings()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Settings)}.{nameof(SavePelotonSettings)}", kind: ActivityKind.Client);
		pelotonSettings.ExcludeWorkoutTypes = selectedWorkoutTypes;
		pelotonSettings = await _apiClient.SettingsPelotonPostAsync(pelotonSettings);
	}

	protected void ClearGarminPassword()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Settings)}.{nameof(ClearGarminPassword)}", kind: ActivityKind.Client);
		garminSettings.Password = string.Empty;
		garminSettings.IsPasswordSet = false;
	}

	protected async Task SaveGarminSettings() 
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Settings)}.{nameof(SaveGarminSettings)}", kind: ActivityKind.Client);
		garminSettings = await _apiClient.SettingsGarminPostAsync(garminSettings);
	}

	private async Task LoadDataAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Settings)}.{nameof(LoadDataAsync)}", kind: ActivityKind.Client);
		var settingsTask = _apiClient.SettingsGetAsync();
		var systemInfoTask = _apiClient.SystemInfoGetAsync(new SystemInfoGetRequest() { CheckForUpdate = false });

		await Task.WhenAll(settingsTask, systemInfoTask);

		var settings = await settingsTask;
		var systemInfo = await systemInfoTask;

		configDocumentation = systemInfo.Documentation + "/configuration/json.html";

		appSettings = settings.App;
		formatSettings = settings.Format;
		pelotonSettings = settings.Peloton;
		garminSettings = settings.Garmin;

		selectedWorkoutTypes = pelotonSettings.ExcludeWorkoutTypes.ToList();
	}
}
