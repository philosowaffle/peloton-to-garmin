@page "/"
@inject IApiClient _apiClient

<PageTitle>Home</PageTitle>

<h1>Welcome to the Peloton to Garmin UI!</h1>

<p>This is a work in progress and not guaranteed to fully work yet. Breaking changes will happen. Feel free to check it out.</p>

<div class="row">
	<div class="col-sm-2">
        <div class="card @syncStatusBorderClass mb-3">
            <div class="card-body @syncStatusTextClass">
                <h5 class="card-title">Automatic Syncing <i class="fa-solid fa-circle" style="@syncStatusBadgeClass"></i></h5>
                <p class="font-weight-bold">@syncStatus.AutoSyncHealthString</p>
                @if (syncStatus.SyncStatus != Common.Database.Status.NotRunning)
                {
                    <p><span class="font-weight-bold">Last Sync: </span><br />@syncStatus.LastSyncTime</p>
                    <p><span class="font-weight-bold">Last Successful Sync: </span><br />@syncStatus.LastSuccessfulSyncTime</p>
                    <p><span class="font-weight-bold">Next Scheduled Sync: </span><br />@syncStatus.NextSyncTime</p>
                }
            </div>
        </div>
    </div>
</div>

@if (syncRunning)
{
	<p><em>Syncing...</em></p>
}
else
{
	if (syncResponse is object)
	{
		if (syncResponse.Errors.Any())
		{
			foreach (var error in syncResponse.Errors)
			{
				<ul>
					<li><em>@error.Message</em></li>
				</ul>
			}
		} else
		{
			<p>Success!</p>
		}
	}

	<button class="btn btn-primary" @onclick="SyncAsync">Sync Now</button>
}


@code {

	private SyncPostResponse? syncResponse;
	private SyncGetResponse syncStatus;
	private Common.Settings settings;
	private bool syncRunning;

	private string syncStatusBorderClass = "border-light";
	private string syncStatusTextClass = "";
	private string syncStatusBadgeClass = "color:gray";

	public Index() : base()
	{
		syncStatus = new SyncGetResponse();
		syncResponse = null;

		settings = new Common.Settings();
		syncRunning = false;
	}

	protected override async Task OnInitializedAsync()
	{
		var getSettingsTask = _apiClient.SettingsGetAsync();

		await Task.WhenAll(getSettingsTask, LoadSyncStatusAsync());

		settings = await getSettingsTask;
	}

	private async Task LoadSyncStatusAsync()
	{
		syncStatus = await _apiClient.SyncGetAsync();

		switch (syncStatus.SyncStatus)
		{
			case Common.Database.Status.Running:
				syncStatusBorderClass = "border-success";
				syncStatusBadgeClass = "color:green";
				break;
			case Common.Database.Status.NotRunning:
				syncStatusBorderClass = "border-secondary";
				syncStatusTextClass = "text-secondary";
				syncStatusBadgeClass = "color:gray";
				break;
			case Common.Database.Status.Dead:
				syncStatusBorderClass = "border-danger";
				syncStatusTextClass = "text-danger";
				syncStatusBadgeClass = "color:red";
				break;
			case Common.Database.Status.UnHealthy:
				syncStatusBorderClass = "border-warning";
				syncStatusBadgeClass = "color:yellow";
				break;
		}
	}

	private async Task SyncAsync()
	{
		try
		{
			syncRunning = true;
			syncResponse = null;
			syncResponse = await _apiClient.SyncPostAsync(new SyncPostRequest() { NumWorkouts = settings.Peloton.NumWorkoutsToDownload });
		} 
		finally
		{
			syncRunning = false;
		}
	}
}