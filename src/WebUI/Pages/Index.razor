@page "/"
@inherits TracingComponentBase
@inject IApiClient _apiClient
@inject IHxMessengerService _toaster;

<PageTitle>Home</PageTitle>


<div class="row">
	<div class="col">
		<HxBadge Type="BadgeType.RoundedPill" Color="@GetPillThemeColor(syncStatus.SyncStatus)" TextColor="@GetPillTextThemeColor(syncStatus.SyncStatus)">Background Sync is @syncStatus.AutoSyncHealthString</HxBadge>
		@if (syncStatus.SyncStatus != Common.Database.Status.NotRunning)
		{
			<span> </span>
			<HxBadge Type="BadgeType.RoundedPill" Color="ThemeColor.Secondary" TextColor="ThemeColor.Light">Next Sync: @syncStatus.NextSyncTime</HxBadge>
		}
	</div>
</div>

<br />

<div class="col">
	<HxButton Color="ThemeColor.Primary" @onclick="SyncTodaysWorkoutsAsync">Sync todays workouts</HxButton>
</div>

<br />


<HxCard>
    <HeaderTemplate>
		<b>Today's Workouts</b>
	</HeaderTemplate>
    <BodyTemplate>
		<HxGrid TItem="PelotonWorkout" MultiSelectionEnabled="false" Responsive="true" DataProvider="LoadTodaysWorkoutsAsync" SelectionEnabled="false">
            <Columns>
				<HxGridColumn TItem="PelotonWorkout" HeaderText="Date" ItemTextSelector="@(item => DateTimeOffset.FromUnixTimeSeconds(item.Created_At).LocalDateTime.ToString())" />
				<HxGridColumn TItem="PelotonWorkout" HeaderText="Title" ItemTextSelector="@(item => item.WorkoutTitle ?? item.Name)" />
            </Columns>
        </HxGrid>
    </BodyTemplate>
</HxCard>


@code {

	private SyncPostResponse? syncResponse;
	private SyncGetResponse syncStatus;
	private SettingsGetResponse settings;
	private SystemInfoGetResponse systemInfo;
	private bool syncRunning;
	private ICollection<string> TodaysWorkoutIds;

	public Index() : base(nameof(Index))
	{
		syncStatus = new SyncGetResponse();
		syncResponse = null;

		settings = new SettingsGetResponse();
		syncRunning = false;

		systemInfo = new SystemInfoGetResponse();

		TodaysWorkoutIds = new List<string>(0);

		_toaster?.Clear();
	}

	protected override async Task OnInitializedAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Index)}.{nameof(OnInitializedAsync)}", kind: ActivityKind.Client);

		try
		{
			var getSettingsTask = _apiClient.SettingsGetAsync();
			await Task.WhenAll(getSettingsTask, LoadSyncStatusAsync());

			settings = await getSettingsTask;

			if (settings.App.CheckForUpdates)
			{
				systemInfo = await _apiClient.SystemInfoGetAsync(new SystemInfoGetRequest() { CheckForUpdate = true });
				if (systemInfo.NewerVersionAvailable.GetValueOrDefault())
					_toaster.AddInformation(title: "New Version Available!", message: "Head over to the About page to learn more");
			}

		} catch (Exception e)
		{
			Log.Error("UI - Failed to fetch data for home page.", e);
			_toaster.AddError($"Failed to fetch data from P2G Api - {e.Message} - See logs for details.");
		}
	}

	public override void Dispose()
	{
		_toaster.Clear();
		base.Dispose();
	}

	private async Task LoadSyncStatusAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Index)}.{nameof(LoadSyncStatusAsync)}", kind: ActivityKind.Client);

		try
		{
			syncStatus = await _apiClient.SyncGetAsync();
		} 
		catch (Exception e)
		{
			Log.Error("UI - Failed to fetch Sync status.", e);
			_toaster.AddError($"Failed to fetch Sync status - {e.Message} - See logs for details.");
		}
	}

	private async Task<GridDataProviderResult<PelotonWorkout>> LoadTodaysWorkoutsAsync(GridDataProviderRequest<PelotonWorkout> request)
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Sync)}.{nameof(LoadTodaysWorkoutsAsync)}", kind: ActivityKind.Client);

		_toaster.Clear();

		try
		{
			var today = DateTime.UtcNow.Date.AddDays(0);
			var todaysWorkouts = await _apiClient.PelotonWorkoutsGetAsync(new PelotonWorkoutsGetAllRequest() 
			{ 
				SinceDate = today, 
				WorkoutStatusFilter = WorkoutStatus.Completed, 
				ExcludeWorkoutTypes = settings.Peloton.ExcludeWorkoutTypes
			});

			TodaysWorkoutIds = todaysWorkouts.Items.Select(i => i.Id).ToList();

			return new GridDataProviderResult<PelotonWorkout>() { Data = todaysWorkouts.Items, TotalCount = todaysWorkouts.Items.Count() };
		}
		catch (FlurlHttpException e)
		{
			var error = await e.GetResponseJsonAsync<ErrorResponse>();
			_toaster.AddError(error.Message);
			Log.Error("UI - Failed to load Peloton workouts.", e);
		}
		catch (Exception e)
		{
			_toaster.AddError($"Failed to load Peloton workouts - {e.Message} - See logs for details.");
			Log.Error("UI - Failed to load Peloton workouts.", e);
		}

		return new GridDataProviderResult<PelotonWorkout>() { Data = new List<PelotonWorkout>(0), TotalCount = 0 };
	}

	private async Task SyncTodaysWorkoutsAsync()
	{
		using var tracing = Tracing.ClientTrace($"{nameof(Index)}.{nameof(SyncTodaysWorkoutsAsync)}", kind: ActivityKind.Client);

		if (!TodaysWorkoutIds.Any())
		{
			_toaster.AddInformation("No workouts to sync today.");
			return;
		}

		try
		{
			syncRunning = true;
			syncResponse = null;
			syncResponse = await _apiClient.SyncPostAsync(new SyncPostRequest() { WorkoutIds = TodaysWorkoutIds });
		}
		catch (FlurlHttpTimeoutException te){
			_toaster.AddInformation("Long running sync will continue running in the background.");
			Log.Information("UI - Sync timeout reached.", te);
		}
		catch(Exception e)
		{
			_toaster.AddError($"Failed to sync - {e.Message} - See logs for details.");
			Log.Error("UI - Failed to sync.", e);
		}
		finally
		{
			syncRunning = false;
			if (syncResponse?.Errors?.Any() ?? false)
			{
				foreach (var error in syncResponse.Errors)
				{
					_toaster.AddWarning($"Errors during sync - {error.Message}");
				}
			}
		}
	}

	private ThemeColor GetPillThemeColor(Common.Database.Status status)
	{
		switch (syncStatus.SyncStatus)
		{
			case Common.Database.Status.Running:
				return ThemeColor.Success;
			case Common.Database.Status.NotRunning:
				return ThemeColor.Secondary;
			case Common.Database.Status.Dead:
				return ThemeColor.Danger;
			case Common.Database.Status.UnHealthy:
				return ThemeColor.Warning;
		}

		return ThemeColor.Light;
	}

	private ThemeColor GetPillTextThemeColor(Common.Database.Status status)
	{
		switch (syncStatus.SyncStatus)
		{
			case Common.Database.Status.Running:
				return ThemeColor.Light;
			case Common.Database.Status.NotRunning:
				return ThemeColor.Light;
			case Common.Database.Status.Dead:
				return ThemeColor.Light;
			case Common.Database.Status.UnHealthy:
				return ThemeColor.Dark;
		}

		return ThemeColor.Dark;
	}
}