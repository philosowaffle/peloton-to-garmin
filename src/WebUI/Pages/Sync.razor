@page "/sync"
@inject IApiClient _apiClient;

<PageTitle>Sync</PageTitle>

<HxButton Text="Sync" OnClick="SyncAsync" Color="ThemeColor.Primary" />

<HxGrid TItem="RecentWorkout" MultiSelectionEnabled="true" TableContainerCssClass="table-responsive" @bind-SelectedDataItems="selectedItems" DataProvider="LoadDataAsync" PageSize="25">
	<Columns>
		<HxGridColumn TItem="RecentWorkout" HeaderText="Date" ItemTextSelector="@(item => DateTimeOffset.FromUnixTimeSeconds(item.Created_At).LocalDateTime.ToString())" SortString="@nameof(RecentWorkout.Created_At)" IsDefaultSortColumn="true" />
		<HxGridColumn TItem="RecentWorkout" HeaderText="Title" ItemTextSelector="@(item => item.Title ?? item.Name)" SortString="@nameof(RecentWorkout.Title)" />
		<HxGridColumn TItem="RecentWorkout" HeaderText="Status" ItemTextSelector="@(item => item.Status)" SortString="@nameof(RecentWorkout.Status)" />
	</Columns>
</HxGrid>

<HxButton Text="Sync" OnClick="SyncAsync" Color="ThemeColor.Primary" />

@code {

	private HashSet<RecentWorkout> selectedItems = new();

	private async Task<GridDataProviderResult<RecentWorkout>> LoadDataAsync(GridDataProviderRequest<RecentWorkout> request)
	{
		var recentWorkouts = await _apiClient.PelotonWorkoutsGetAsync();
		return new GridDataProviderResult<RecentWorkout>() { Data = recentWorkouts.Items, TotalCount = recentWorkouts.Items.Count };
	}

	private Task SyncAsync()
	{
		return _apiClient.SyncPostAsync(new SyncPostRequest() { WorkoutIds = selectedItems.Select(i => i.Id).ToList() });
	}
}
