name: PR Test

on:
  pull_request:
    branches: [ master ]

jobs:

  build-and-test:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        dotnet: [ '6.0']
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core SDK ${{ matrix.dotnet }}
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: ${{ matrix.dotnet }}
    - name: Clean
      run: dotnet clean --configuration Debug && dotnet nuget locals all --clear
    
    - name: Restore
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Debug

    - name: Test
      run: dotnet test

  compile-distro-console:
    name: Compile Distro
    runs-on: 'windows-latest'
    strategy:
      max-parallel: 1
      matrix:
        dotnet: [ '6.0' ]
        os: [ 'win10-x64' ]
        python-version: [ 3.9.6 ]

    steps:

    - uses: actions/checkout@v2
    - name: Setup .NET Core SDK ${{ matrix.dotnet }}
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: ${{ matrix.dotnet }}
    
    - name: Clean
      run: dotnet clean ${{ github.workspace }}/src/PelotonToGarminConsole/PelotonToGarminConsole.csproj --configuration Release && dotnet nuget locals all --clear
    
    - name: Restore
      run: dotnet restore ${{ github.workspace }}/src/PelotonToGarminConsole/PelotonToGarminConsole.csproj

    - name: Prepare env
      run: |
          echo "BUILD_VERSION=$Env:GITHUB_RUN_NUMBER-$Env:GITHUB_RUN_ID" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo "RUNNER_TOOL_CACHE=$Env:RUNNER_TOOL_CACHE" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        
    - name: Publish ${{matrix.os}}
      run: dotnet publish ${{ github.workspace }}/src/PelotonToGarminConsole/PelotonToGarminConsole.csproj --no-restore -c Release -r ${{ matrix.os }} -o ${{ github.workspace }}/dist/${{ matrix.os }} --version-suffix ${{ env.BUILD_VERSION }}

    - name: Copy Config to Distro
      run: cp ${{ github.workspace }}/configuration.example.json ${{ github.workspace }}/dist/${{ matrix.os }}/configuration.local.json

    # Package all-in-one python and add to distro
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ github.workspace }}/python/requirements.txt
        pip install pyinstaller

    - name: Package Python - Windows
      if: ${{ matrix.os == 'win10-x64' }}
      working-directory: ${{ github.workspace }}/python
      run: |
        pyinstaller -n upload --distpath ${{ github.workspace }}/dist/${{ matrix.os }}/python/ --console --clean --onefile --noconfirm --add-data "${{ env.RUNNER_TOOL_CACHE }}/python/3.9.6/x64/lib/site-packages/cloudscraper;./cloudscraper" ${{ github.workspace }}/python/upload.py

    # Create Build Artifact
    - name: Upload Artifact ${{ matrix.os }}_${{ env.BUILD_VERSION }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}_${{ env.BUILD_VERSION }}
        path: ${{ github.workspace }}/dist/${{ matrix.os }}
 
  create_image_console:
   name: Publish Docker Console - PR
   runs-on: ubuntu-latest

   steps:
    - name: Check out the repo
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Prepare env
      run: |
        echo "BUILD_VERSION=${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ID}" >> $GITHUB_ENV

    - name: Build & Push to DockerHub
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        file: ./docker/Dockerfile.console
        tags: philosowaffle/peloton-to-garmin:pr-validator-console-A
        platforms: linux/amd64
        build-args: VERSION=${{ env.BUILD_VERSION }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    -
     # Temp fix
     # https://github.com/docker/build-push-action/issues/252
     # https://github.com/moby/buildkit/issues/1896
     name: Move cache
     run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
  
  create_image_api:
   name: Publish Docker API - PR
   runs-on: ubuntu-latest

   steps:
    - name: Check out the repo
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Prepare env
      run: |
        echo "BUILD_VERSION=${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ID}" >> $GITHUB_ENV

    - name: Build & Push to DockerHub
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        file: ./docker/Dockerfile.api
        tags: philosowaffle/peloton-to-garmin:pr-validator-api-A
        platforms: linux/amd64
        build-args: VERSION=${{ env.BUILD_VERSION }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    -
     # Temp fix
     # https://github.com/docker/build-push-action/issues/252
     # https://github.com/moby/buildkit/issues/1896
     name: Move cache
     run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  create_image_webui:
   name: Publish Docker Web UI - PR
   runs-on: ubuntu-latest

   steps:
    - name: Check out the repo
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Prepare env
      run: |
        echo "BUILD_VERSION=${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ID}" >> $GITHUB_ENV

    - name: Build & Push to DockerHub
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        file: ./docker/Dockerfile.webui
        tags: philosowaffle/peloton-to-garmin:pr-validator-webui-A
        platforms: linux/amd64
        build-args: VERSION=${{ env.BUILD_VERSION }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

    -
     # Temp fix
     # https://github.com/docker/build-push-action/issues/252
     # https://github.com/moby/buildkit/issues/1896
     name: Move cache
     run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}