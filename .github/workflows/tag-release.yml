# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: TagAndRelease

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version'
        required: true

jobs:
  docker-image-console:
    name: Publish Docker Console - Release
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx      
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Prepare env
        run: |
          echo "BUILD_VERSION=${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ID}" >> $GITHUB_ENV

      - name: Build & Push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ./docker/Dockerfile.console
          tags: philosowaffle/peloton-to-garmin:stable,philosowaffle/peloton-to-garmin:v${{ github.event.inputs.version }}
          platforms: linux/arm64,linux/amd64
          build-args: VERSION=${{ env.BUILD_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  
  docker-image-api:
    name: Publish Docker API - Release
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx      
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Prepare env
        run: |
          echo "BUILD_VERSION=${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ID}" >> $GITHUB_ENV

      - name: Build & Push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ./docker/Dockerfile.api
          tags: philosowaffle/peloton-to-garmin:api-stable,philosowaffle/peloton-to-garmin:api-v${{ github.event.inputs.version }}
          platforms: linux/arm64,linux/amd64
          build-args: VERSION=${{ env.BUILD_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  
  docker-image-webui:
    name: Publish Docker WebUI - Release
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx      
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Prepare env
        run: |
          echo "BUILD_VERSION=${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ID}" >> $GITHUB_ENV

      - name: Build & Push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ./docker/Dockerfile.webui
          tags: philosowaffle/peloton-to-garmin:webui-stable,philosowaffle/peloton-to-garmin:webui-v${{ github.event.inputs.version }}
          platforms: linux/arm64,linux/amd64
          build-args: VERSION=${{ env.BUILD_VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      -
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  compile_distro_and_create_gh_release:
    name: Compile Distro & Create GH Release - Release
    runs-on: 'windows-latest'
    strategy:
      max-parallel: 1
      matrix:
        dotnet: [ '6.0' ]
        #os: [ 'win10-x64', 'osx-x64' ] # osx signing issue, mac wont run the executable
        os: [ 'win10-x64' ]
        python-version: [ 3.9.6 ]

    steps:

    - uses: actions/checkout@v2
    - name: Setup .NET Core SDK ${{ matrix.dotnet }}
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: ${{ matrix.dotnet }}
    
    - name: Clean
      run: dotnet clean --configuration Release && dotnet nuget locals all --clear
    
    - name: Restore
      run: dotnet restore

    - name: Prepare env
      run: |
          echo "BUILD_VERSION=${GITHUB_RUN_NUMBER}-${GITHUB_RUN_ID}" >> $GITHUB_ENV
          echo "RUNNER_TOOL_CACHE=$Env:RUNNER_TOOL_CACHE" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        
    - name: Publish ${{matrix.os}}
      run: dotnet publish ${{ github.workspace }}/src/PelotonToGarminConsole/PelotonToGarminConsole.csproj --no-restore -c Release -r ${{ matrix.os }} -o ${{ github.workspace }}/dist/${{ matrix.os }} --self-contained true

    - name: Copy Config to Distro
      run: cp ${{ github.workspace }}/configuration.example.json ${{ github.workspace }}/dist/${{ matrix.os }}/configuration.local.json

    # Package all-in-one python and add to distro
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ github.workspace }}/python/requirements.txt
        pip install pyinstaller

    - name: Package Python - Windows
      if: ${{ matrix.os == 'win10-x64' }}
      working-directory: ${{ github.workspace }}/python
      run: |
        pyinstaller -n upload --distpath ${{ github.workspace }}/dist/${{ matrix.os }}/python/ --console --clean --onefile --noconfirm --add-data "${{ env.RUNNER_TOOL_CACHE }}/python/3.9.6/x64/lib/site-packages/cloudscraper;./cloudscraper" ${{ github.workspace }}/python/upload.py
    
    - name: Package Python - MacOS
      if: ${{ matrix.os == 'osx-x64' }}
      working-directory: ${{ github.workspace }}/python
      run: |
        pyinstaller -n upload --distpath ${{ github.workspace }}/dist/${{ matrix.os }}/python/ --console --clean --onefile --noconfirm --add-data "${{ env.RUNNER_TOOL_CACHE }}/python/3.9.6/x64/lib/site-packages/cloudscraper;./cloudscraper" ${{ github.workspace }}/python/upload.py

    # Create Build Artifact
    - name: Upload Artifact ${{ matrix.os }}_${{ github.event.inputs.version }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}_${{ github.event.inputs.version }}
        path: ${{ github.workspace }}/dist/${{ matrix.os }}
    
    - name: Create Zip for Release Artifact 
      uses: papeloto/action-zip@v1
      with:
        files: /dist/${{ matrix.os }}
        dest: /dist/${{ matrix.os }}_${{ github.event.inputs.version }}.zip
    
    - name: Create Release and Upload Artifact
      uses: ncipollo/release-action@v1
      with:
        artifacts: "${{ github.workspace }}/dist/${{ matrix.os }}_${{ github.event.inputs.version }}.zip"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: v${{ github.event.inputs.version }}
        allowUpdates: true
        replacesArtifacts: true
