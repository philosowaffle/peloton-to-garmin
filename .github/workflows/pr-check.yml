name: PR Check

on:
  workflow_dispatch:
  pull_request:
    branches: [ master, v4-wip ]

jobs:

  # build-and-test:
  #   strategy:
  #     matrix:
  #       dotnet: ['7.0']
  #       os: [windows-latest]

  #   runs-on: ${{ matrix.os }}

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Install dotnet
  #     uses: actions/setup-dotnet@v3
  #     with:
  #       dotnet-version: ${{ matrix.dotnet }}

  #   - name: Install MAUI Workloads
  #     run: dotnet workload install maui --ignore-failed-sources

  #   - name: Clean
  #     run: dotnet clean --configuration Debug && dotnet nuget locals all --clear
    
  #   - name: Restore
  #     run: dotnet restore

  #   - name: Build
  #     run: dotnet build --no-restore --configuration Debug

  #   - name: Test
  #     run: dotnet test

  # publish-windows-console-exe-dist:
  #   name: Publish Windows Console Exe Distribution
  #   runs-on: 'windows-latest'
  #   needs: build-and-test
  #   strategy:
  #     max-parallel: 1
  #     matrix:
  #       dotnet: [ '7.0' ]
  #       os: [ 'win10-x64' ]

  #   steps:

  #   - uses: actions/checkout@v3
  #   - name: Publish Windows Console Exe Distribution
  #     uses: ./.github/actions/publish-console-exe-dist
  #     with:
  #       dotnet-version: ${{ matrix.dotnet }}
  #       os: ${{ matrix.os }}

  publish-ui-dist:
    name: Publish UI Distribution
    runs-on: 'windows-latest'
    # needs: build-and-test
    strategy:
      max-parallel: 1
      matrix:
        dotnet: [ '7.0' ]
        framework: ['net7.0-windows10.0.19041.0']
        os: [ 'win10-x64' ]

    steps:

      - uses: actions/checkout@v3
      - name: Publish UI Distribution
        uses: ./.github/actions/publish-ui-dist
        with:
          dotnet-version: ${{ matrix.dotnet }}
          os: ${{ matrix.os }}
          framework: ${{ matrix.framework }}
          secret_maui_signing_key: ${{ secrets.MAUI_SIGNING_KEY }}
          secret_maui_pfx_password: ${{ secrets.MAUI_PFX_PASSWORD }}

  # compile-distro-ui:
  #  name: Compile Distro UI
  #  runs-on: 'windows-latest'
  #  needs: build-and-test
  #  strategy:
  #    max-parallel: 1
  #    matrix:
  #      dotnet: [ '7.0' ]
  #      framework: ['net7.0-windows10.0.19041.0']
  #      os: [ 'win10-x64' ]

  #  steps:

  #  - uses: actions/checkout@v3
  #  - name: Setup .NET Core SDK ${{ matrix.dotnet }}
  #    uses: actions/setup-dotnet@v3
  #    with:
  #      dotnet-version: ${{ matrix.dotnet }}

  #  - name: Install MAUI Workloads
  #    run: dotnet workload install maui --ignore-failed-sources
    
  #  - name: Clean
  #    run: dotnet clean ${{ github.workspace }}/src/ClientUI/ClientUI.csproj --configuration Release && dotnet nuget locals all --clear
    
  #  - name: Restore
  #    run: dotnet restore ${{ github.workspace }}/src/ClientUI/ClientUI.csproj

  #  - name: Prepare env
  #    run: |
  #        echo "BUILD_VERSION=$Env:GITHUB_RUN_NUMBER-$Env:GITHUB_RUN_ID" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
  #        echo "RUNNER_TOOL_CACHE=$Env:RUNNER_TOOL_CACHE" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
  
  #  - name: Decrypt PFX file
  #    run: |
  #       echo "${{ secrets.MAUI_SIGNING_KEY}}" > cert.pfx.asc
  #       certutil -decode cert.pfx.asc cert.pfx
  
  #  - name: Add cert to Store
  #    run: certutil -user -q -p "${{ secrets.MAUI_PFX_PASSWORD }}" -importpfx cert.pfx NoRoot
        
  #  - name: Publish ${{matrix.os}}
  #    run: dotnet publish ${{ github.workspace }}/src/ClientUI/ClientUI.csproj --no-restore -c Release -f ${{ matrix.framework }} -p:RuntimeIdentifierOverride=${{ matrix.os }} -o ${{ github.workspace }}/dist/${{ matrix.os }}-ui

  #  # Create Build Artifact
  #  - name: Upload Artifact ${{ matrix.os }}_${{ env.BUILD_VERSION }}
  #    uses: actions/upload-artifact@v3
  #    with:
  #      name: ${{ matrix.os }}_ui_${{ env.BUILD_VERSION }}
  #      path: ${{ github.workspace }}/dist/${{ matrix.os }}-ui/AppPackages
 
  # publish-docker-images:
  #   name: Publish Docker Images
  #   runs-on: ubuntu-latest
  #   needs: build-and-test
  #   strategy:
  #     matrix:
  #         dockerfile: ['Dockerfile.console', 'Dockerfile.api', 'Dockerfile.webui']
  #         include:
  #             - dockerfile: 'Dockerfile.console'
  #               tag: 'pr-validator-console-A'
  #             - dockerfile: 'Dockerfile.api'
  #               tag: 'pr-validator-api-A'
  #             - dockerfile: 'Dockerfile.webui'
  #               tag: 'pr-validator-webui-A'

  #   steps:

  #   - uses: actions/checkout@v3
  #   - name: Publish Docker Images
  #     uses: ./.github/actions/publish-docker-images
  #     with:
  #       dockerfile: ${{ matrix.dockerfile }}
  #       tag: ${{ matrix.tag }}
  #       secret_docker_username: ${{ secrets.DOCKER_USERNAME }}
  #       secret_docker_password: ${{ secrets.DOCKER_PASSWORD }}
  #       secret_github_package: ${{ secrets.GH_PACKAGE_SECRET}}